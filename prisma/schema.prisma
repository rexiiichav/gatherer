// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {  
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @db.VarChar(255) @unique
  password     String   @db.VarChar(255)
}

model Food {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50) @unique
  ingredients Ingredient[]
  location    Location  @relation(fields: [locationId], references: [id])
  locationId  Int
}

//Conversion is to the nearest gallon or pound.
//This depends if it is measured by volume, weight,
//or self (non-convertible). Default to 1 for self.
model Measure {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(50) @unique
  ingredients       Ingredient[] 
  aggregateByVolume Boolean  @default(false)
  aggregateByWeight Boolean  @default(false)
  conversion        Decimal  @db.Decimal(20, 10)
}

model Location {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(50) @unique
  foods  Food[]     
}

model Recipe {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(50) @unique
  ingredients  Ingredient[]  
}

model Ingredient {
  id          Int     @id @default(autoincrement())
  quantity    Decimal @db.Decimal(20, 10)    
  recipe      Recipe  @relation(fields: [recipeId], references: [id])
  recipeId    Int
  food        Food  @relation(fields: [foodId], references: [id])
  foodId      Int
  measure     Measure  @relation(fields: [measureId], references: [id])
  measureId   Int
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   
  expiresAt DateTime
}


